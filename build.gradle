plugins {
    id 'java'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.57'
}

version = "${mcversion}-v${modversion}"
group = "me.srrapero720"
archivesBaseName = modid

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }
    client {
        workingDirectory project.file('run')
//        programArgument '-mixin.config=' + String.valueOf(modid) + '.mixin.json'
        //jvmArgs '-XX:+UnlockCommercialFeatures' // uncomment for profiling
        systemProperty 'forge.enabledGameTestNamespaces', project.modid
        systemProperty 'forge.logging.console.level', 'info'
        systemProperty 'terminal.jline', 'true'
        systemProperty 'fml.earlyprogresswindow', 'false'
        modSource project.sourceSets.main
        programArgument '--nogui'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {
    mavenCentral()
    maven { url "https://repo.spongepowered.org/maven" }
    maven { url "https://maven.tterrag.com/" }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
        maven {
            url "https://maven.blamejared.com"
        }
    maven { url 'https://jitpack.io' }
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${fgversion}"

    // DEPENDENCIES
    implementation "org.embeddedt:embeddium-${mcversion}:${embeddiumversion}"
    compileOnly "curse.maven:jei-238222:${jeiversion}"
//    runtimeOnly "curse.maven:textrues-embeddium-options-910506:${embeddiumoptionsversion}"
//    runtimeOnly "curse.maven:oculus-581495:${oculusversion}"

//    // MOD SUPPORT
//    implementation fg.deobf("com.simibubi.create:create-${mcversion}:${createversion}:slim") { transitive = false }
//    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${mcversion}:${flywheelversion}")
//    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrateversion}")
}

jar {
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "${modauthor}",
                "Specification-Version": "${modversion}",
                "Implementation-Title": "${modname}",
                "Implementation-Version": "${modversion}",
                "Implementation-Vendor" : "${modauthor}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.mixin.json"
        ])
    }
}

// Process target resources with mod info
tasks.processResources.outputs.upToDateWhen { false }
processResources {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand(rootProject.properties)
    }
}

jar.finalizedBy('reobfJar')
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}